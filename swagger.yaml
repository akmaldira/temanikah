openapi: 3.0.3
info:
  title: Temanikah - OpenAPI 3.0
  description:
    API Temanikah
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:5000/api
tags:
  - name: auth
    description: Get access on resource
  - name: user
    description: Get users information
paths:
  /auth/login:
    post:
      operationId: login
      security: []
      summary: Login user
      tags:
        - auth
      description: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ILoginRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/register:
    post:
      operationId: register
      security: []
      summary: Register User
      tags:
        - auth
      description: Register User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IRegisterRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /users:
    get:
      operationId: users
      security:
        - bearerAuth: []
      summary: Get all users
      tags:
        - user
      description: Get all users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    ILoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: akmaldiraa@gmail.com
        password:
          type: string
          example: Ape123123
    LoginResponse:
      type: object
      properties:
        error:
          type: boolean
          example: false
        data:
          type: object
          properties:
            id:
              type: string
              example: 550e8400-e29b-41d4-a716-446655440000
            token:
              type: string
              example: jwt.token.io
            role:
              type: array
              items:
                $ref: '#/components/schemas/Role'
    IRegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: akmaldiraa@gmail.com
        password:
          type: string
          example: Ape123123
    RegisterResponse:
      type: object
      properties:
        error:
          type: boolean
          example: false'
        data:
          properties:
            id:
              type: string
              example: 550e8400-e29b-41d4-a716-446655440000
            email:
              type: string
              example: akmaldiraa@gmail.com
            role:
              type: array
              items:
                $ref: '#/components/schemas/Role'
    User:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          example: akmaldiraa@gmail.com
        created_at:
          type: string
        role:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        is_verified:
          type: boolean
        is_banned:
          type: boolean
        banned_reason:
          type: string
        banned_at:
          type: string
    Role:
      type: array
      items: 
        - type: string
          example: user
        - type: string
          example: admin
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: 'Server error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: 'Ada yang salah'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: 'Token Habis'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: boolean
                example: true
              message:
                type: string
                example: 'Gapunya akses'
